[ IOC ] : Inversion Of Control  : 제어의 역전
    1. 정의 : 객체의 생성 및 관리의 *제어권*을 개발자가 아닌 스프링 프레임워크가 담당한다.
        스프링에서는 *컨테이너*가 IOC를 담당한다.
    2. 목적 : 효율적이고 규칙적인 객체를 관리/사용 하기 위해서 스프링이 이를 대신한다.
        이유는 ? : 여러 사람들이 비규칙적인 객체를 사용하면 중복적인 객체생성이나 객체충돌이 발생 할 수 있는 것을 방지하기 위함.

    3. 주요 어노테이션
        @Component : 컨테이너(스프링 메모리/저장소) 에 클래스의 (빈)정보를 등록한다. *빈 : 컨테이너에서 관리하는 객체
        ( @Component 내장된 주요 어노테이션 )
            - @Controller @RestController @Service @Repository @Configuration 등등
            - 각기 다른 기능들과 @Component 가 내장됨
            - 주로 MVC 패턴은 IOC 기반이면서 스프링의 필수 패턴!
[ DI ] : Dependency Injection : 의존성 주입
    1. 정의 : 객체를 직접 생성하지 않고 외부(스프링 컨테이너)로 부터 주입받도록 하는 방법
    2. 목적 : 객체들 간의 결합도(관계)를 낮추고 유지보수성을 향상
    3. 주요 어노테이션
        @Autowired : 스프링 컨테이너에 등록된 빈(객체)을 꺼내온다.
